package org.mobicents.slee.resource.amqp;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.slee.resource.ActivityHandle;
import javax.slee.resource.FireableEventType;
import javax.slee.resource.Marshaler;

public class AMQPMarshaler implements Marshaler {

	// Events -----------------------------------------------------------------
	
	public int getEstimatedEventSize(FireableEventType eventType, Object event) {
		// TODO: return an estimation of the size (in bytes) of the marshaled
		//       form of an Event object generated by the Resource Adaptor. It
		//       can be used by the SLEE to help size appropriately any 
		//       internal buffers used to store the marshaled form of an Event.

//		return AMQPEventImpl.getEstimatedEventSize();
		throw new UnsupportedOperationException();
	}

	public ByteBuffer getEventBuffer(FireableEventType eventType, Object event) {
		// TODO: return a ByteBuffer containing an already marshaled form of
		//       the Event object specified by the event argument. The 
		//       eventType argument specifies the event type of the Event. The
		//       exact purpose of this method is to give the Resource Adaptor
		//       an opportunity to provide the SLEE with a view buffer onto an
		//       existing buffer that already contains the marshaled form of
		//       the Event object.

		throw new UnsupportedOperationException();
	}

	public void releaseEventBuffer(FireableEventType eventType, Object event, ByteBuffer buffer) {
		// TODO: release any resources associated with the specified ByteBuffer
		//       when this method is invoked as the SLEE will no longer use the
		//       buffer.

		throw new UnsupportedOperationException();
	}

	public void marshalEvent(FireableEventType eventType, Object event, DataOutput out) throws IOException {
		// TODO: return the marshaled form of an Event object. The Resource 
		//       Adaptor should write a serialized form of the Event object 
		//       specified by the event argument using the DataOutput object
		//       specified by the out argument. The eventType argument 
		//       identifies the event type of the Event object. 

		throw new UnsupportedOperationException();
//		((AMQPEventImpl)event).toStream(out); 
	}

	public Object unmarshalEvent(FireableEventType eventType, DataInput in) throws IOException {
		// TODO: read the marshaled form of the Event object from the DataInput
		//       object specified by the in argument and reconstruct the Event 
		//       object. The eventType argument identifies the event type of 
		//       the Event object that is marshaled and provides access to the
		//       class name of the event type and a class loader that can be 
		//       used to load the event class if required. 

//		return new AMQPEventImpl(in);
		throw new UnsupportedOperationException();		
	}
	
	// Activity Handles -------------------------------------------------------	

	public int getEstimatedHandleSize(ActivityHandle handle) {
		// TODO: return an estimation of the size (in bytes) of the marshaled
		//       form of an Activity Handle object generated by the Resource 
		//       Adaptor. It can be used by the SLEE to help size appropriately
		//       any internal buffers used to store the marshaled form of an
		//       Activity Handle.

		return AMQPID.getEstimatedHandleSize();
	}

	public void marshalHandle(ActivityHandle handle, DataOutput out) throws IOException {
		// TODO: return the marshaled form of an ActivityHandle object. The
		//       Resource Adaptor should write a serialized form of the 
		//       ActivityHandle object specified by the handle argument using
		//       the DataOutput object specified by the out argument.

		((AMQPID) handle).toStream(out);
	}

	public ActivityHandle unmarshalHandle(DataInput in) throws IOException {
		// TODO: return an unmarshaled ActivityHandle object previously
		//       marshaled by the Resource Adaptor. The Resource Adaptor should
		//       read the marshaled form of the Activity Handle from the 
		//       DataInput object specified by the in argument and reconstruct
		//       the ActivityHandle object.

		return new AMQPID(in);
	}

}
